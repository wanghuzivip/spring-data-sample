package com.test.todo;

import java.util.List;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;

public interface TodoRepository extends CrudRepository<Todo, Long> {
	/**
	 * Query generated by name.
	 * 
	 * The method name follows the convention: find…By, read…By, query…By,
	 * count…By, and get…By.
	 * 
	 * @param title
	 * @return
	 */
	List<Todo> findByTitle(String title);

	/**
	 * Manually specify a query an pass parameters.
	 * 
	 * @param title
	 * @param description
	 * @return
	 */
	@Query("SELECT t FROM Todo t where t.title = :title AND t.description = :description")
	Todo findByTitleAndDescription(@Param("title") String title, @Param("description") String description);

	/**
	 * Returns the found todo entry whose title or description is given as a
	 * method parameter. If no todo entry is found, this method returns an empty
	 * list.
	 */
	List<Todo> findByTitleOrDescription(String title, String description);

	/**
	 * Returns the number of todo entry whose title is given as a method
	 * parameter.
	 */
	long countByTitle(String title);

	/**
	 * Returns the distinct todo entries whose title is given as a method
	 * parameter. If no todo entries is found, this method returns an empty
	 * list.
	 */
	List<Todo> findDistinctByTitle(String title);

	/**
	 * Returns the first three todo entries whose title is given as a method
	 * parameter. If no todo entries is found, this method returns an empty
	 * list.
	 */
	List<Todo> findFirst3ByTitleOrderByTitleAsc(String title);

	/**
	 * Returns the first three todo entries whose title is given as a method
	 * parameter. If no todo entries is found, this method returns an empty
	 * list.
	 */
	List<Todo> findTop3ByTitleOrderByTitleAsc(String title);

	/**
	 * "Search" function using the title and description fields
	 * 
	 * @param descriptionPart
	 * @param titlePart
	 * @return
	 */
	List<Todo> findByDescriptionContainsOrTitleContainsAllIgnoreCase(String descriptionPart, String titlePart);

	/**
	 * Another search function (it does the same as
	 * {@link #findByDescriptionContainsOrTitleContainsAllIgnoreCase(String, String)}
	 * ), but it's not tied to the method name
	 * 
	 * @param searchTerm
	 * @return
	 */
	@Query("SELECT t FROM Todo t WHERE " + "LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR "
			+ "LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))")
	List<Todo> findBySearchTerm(@Param("searchTerm") String searchTerm);
}
